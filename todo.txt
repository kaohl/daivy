
# General
## cmpzip
- [x] Create a zip/jar diff utility that can check for missing/extra files between
      locally built jars vs. ivy provided jars.
      - See 'cmpzip.py'

# Reproducible builds
- [/] To create a reproducible build, the caller must specify which dependencies
      are to be built from source when building a specific benchmark, and which
      should use ivy-provided orignal binary dependencies. Because, if someone
      later adds a source build for a dependency of that benchmark, we need to
      force ivy-provided orignal versions for binary dependencies, for that
      particular build.
      * For now, a build will only be reproducible if the build configuration
        is kept and if the benchmark is built with the same framework version.

# Java / Project (Re-)Sources
- [ ] The original ivy-provided versions of lucene modules are Multi-Release.
      - Should we handle this?
      - Which JVM versions are of interest? (LTS versions?)
      - I guess we could distinguish between "required" and "optional"
        and "conditional" source sets to handle different cases such as
        multi-release, and compile code using jdks specified in build options:
        'jdk11':'...'
        'jdk17':'...'
        'jdk21':'...'
        If the required jdk for a conditional source set is unavailable
        the source is excluded with a comment in verbose mode.
        If the required jdk for an unconditional source set is unavailable,
        the build fails.
        "required"    -- Unconditional (required code) (build fails if not included)
        "conditional" -- Implicit, conditional, inclusion based on availability of tools
                         such as different jdks
        "optional"    -- Enabled explicitly using build options (feature)

- [ ] Should source version be set on individual source file sets instead of on the project?
  - Alt. 1: Default on project; override on source file set
  - Alt. 2: Only version on source file set
  - TODO: How does this affect ivy master configs and classpath resolution?
          I suppose, if different versions require different dependencies then we need version dependent configurations.

## Benchmark Deployment
- [ ] Validate md5sum of deployed artifacts by comparing
      the md5 of the deployed artifact against the md5
      of the corresponding artifact in the source project
      based on the md5 of patch files in build context.

  * Building a dependency without a patch will deploy
    the unpatched (original) version.

   <context>/<artifact>.patch => var/<md5sum(<artifact>.patch)>/{<artifact>.jar,<artifact>.patch}
   * We can always produce the modified source tree by applying the patch to the unzipped 'build.zip'

  - We don't validate the ivy-cache state directly,
    instead validate md5 of deployed artifacts
    - When we build an artifact or update the ivy cache,
      we collect the md5 of the deployed artifact.
      This md5 can be used to validate the artifact copied
      to the buid context deployment.
      - Since a build is recursive we will process all
        source projects affecting the built benchmark
        and hence get a checksum for each artifact
        built from source.
        - We can append these checksum expectations to
          a checksum assertion on the whole deployment
          similar to how dacapo does it. Checksums
          collected during build overrides defaults
          computed from the original deployment.

## Recursive builds
- [x] Traverse dependency graph of top-level project (benchmark)
      and recursively build all transitive dependencies

# Refactoring
- [ ] Generate eclipse configuration for refactoring framework
  - [ ] Extract source archives into workspace assets
  - [ ] Extract binary archives into workspace assets
  - [ ] Generate workspace configuration file
  * For refactoring, we can use binary dependencies

# Batik 1.16
- [x] Search batik source modules for excluded source code to avoid compilation errors
  - [x] batik-anim
  - [x] batik-awt-util
  - [x] batik-bridge
    - Depends on org.mozilla:rhino
  - [x] batik-codec
  - [x] batik-constants
  - [x] batik-css
  - [x] batik-dom
  - [x] batik-ext
  - [x] batik-extension
  - [x] batik-gui-util
  - [x] batik-gvt
  - [x] batik-i18n
  - [x] batik-parser
  - [x] batik-rasterizer (app)
    - Main-Class: org.apache.batik.apps.rasterizer.Main
    - Resources: src/main/resources
  - [x] batik-rasterizer-ext (app)
    - Main-Class: org.apache.batik.apps.rasterizer.Main
    - No resources... (Is this the only difference between this and batik-rasterizer?)
    - classpathPrefix: lib/
  - [x] batik-script
    - Depends on rhino and jython (org.python.jython)
    - Exclude **/jacl/* (depends on tcl.lang)
  - [x] batik-shared-resources
    - Resources: src/main/resources
      - Includes: LICENSE, NOTICE
      - Target path: META-INF
    - NOTE: All(?) batik artifacts depends on this one.
  - [x] batik-slideshow (app)
    - Main-Class: org.apache.batik.apps.slideshow.Main
    - classpathPrefix: lib/
  - [x] batik-squiggle (app)
    - Main-Class: org.apache.batik.apps.svgbrowser.Main
    - classpathPrefix: lib/
  - [x] batik-squiggle-ext (app)
    - Main-Class: org.apache.batik.apps.svgbrowser.Main
    - No classpathPrefix? (what is the difference between this and batik-squiggle?)
  - [x] batik-svgbrowser
    - Resources: src/main/resources
  - [x] batik-svg-dom
  - [x] batik-svggen
  - [x] batik-svgpp (app)
    - Main-Class: org.apache.batik.apps.svgpp.Main
    - classpathPrefix: lib/
  - [x] batik-svgrasterizer
  - [x] batik-swing
  - [x] batik-test (Batik Test Harness)
    - Exclude: **/MemoryLeakTest*
  - [x] batik-test-old
    - Depends on batik-all, ...
    - Depends on rhino
    - Depends on fop-transcoder-allinone
    - Depends on test scope of other test projects
    - Resources: ../test-resources
    - maven-surefire-plugin
      - Include **/*TestCase.java
      - redirectTestOutputToFile=true
      - workingDirectory=..
  - [x] batik-test-svg
    - Looks like a library?
  - [x] batik-test-swing
    - Looks like a library?
  - [x] batik-transcoder
  - [x] batik-ttf2svg (app)
    - Main-Class: org.apache.batik.apps.ttf2svg.Main
    - classpathPrefix: lib/
  - [x] batik-util
    - maven-surefire-plugin
      - Include **/*TestCase.java
      - Include **/*TestCases.java
      - redirectTestOutputToFile=true
    - maven-jar-plugin
      - goal: test-jar  (?)
  - [x] batik-xml
  - [ ] Exclude sources already at extraction from batik source distribution
      - batik-script
        - **/jacl/*
      - WARNING
         - There is no reason to keep these around and be force to exclude them everywhere when used.
         - Also, the eclipse workspace will not fully compile which may prevent refactoring.
- [x] Investigate optional dependencies on rhino and jython (dacapo does not include them)
  - batik-bridge
  - batik-script
  - batik-test-old

## Main (batik-1.16)
### Extract
- [x] Copy <batik-module>/src into <project>/src
### Compile
- [x] Compile <project>/src
- [x] Gather list of dependencies
  - [ ] Investigate automated approach (recurse over deps in batik modules)
- [x] Resolve dependencies via ivy or via local build cache
### Package
- [x] Investigate assembly of jar file (NOTICE, LICENSE, META-INF/{MANIFEST.MF,imports/,services/})
  - All seems to be included via 'src/main/resources'
  - [ ] Some issue with "copy to" resources including NOTICE and LICENSE
- [x] Include 'src/main/resources'
- [x] Exclude files from source tree resources

## Test (batik-1.16)
### Extract
  - [ ] Copy test-resources into <project>/test-resources
  - [ ] Copy test code
  - [ ] Decide on how to handle test projects
        - Inline or separate projects or sub-projects?
        - Either way they need ivy modules with test config and dependency on tested artifact
        - [ ] Generate test project and ivy config
### Compile
  - [ ] Compile projects with test configuration
### Package
  - [ ] Make test suite executable
    - Does not necessarily need to be packaged
### Run
  - [ ] Investigate running junit tests from command-line:
        java\
          -cp dist/:<additional test class dependencies>:hamcrest-core...:junit...\
          org.junit.runner.JUnitCore\
          <fully qualified test class>

      - Use ivy wrapper to resolve test classpath


# JaCoCo (Test coverage reports)
- [ ] Investigate running jacococli
  - See README-jacoco.txt


# Dacapo Harness
- [x] Extract and build harness with benchmarks
- Handle harness resources (see 'build.py')
  - [ ] META-INF/md5/<bm-name>.MD5
  - [ ] META-INF/yml/<bm-name>.yml


# Batik benchmark
- [x] Build dacapo harness
- [x] Build batik harness
- [x] Assemble benchmark jar

# Xalan benchmark
- [x] Extract resources
- [x] Compile
- [x] Assemble benchmark jar
- [x] Deploy
- [ ] Add lib/*.jar from xalan-2.7.2 into classpath?
      *** Only needed for compilation it seems...
          Add anyway?

# Xalan 2.7.2
- [x] Compile
- [ ] Deploy
      - Add lib/*.jar as transitive classpath property
        so that xalan benchmark can pick up these
        runtime dependencies (Not required but would
        be good to imitate the original artifact as much
        as possible.)
        Alternatively, merge into xalan-2.7.2.jar like the
        original.
- [x] Handle META-INF/services
- [x] Clean up extraction and build
- [x] Validate that this version works against xalan benchmark
      because we get version 2.9.1 of xerces instead of 2.8.0
      that is assumed in DaCapo.

# Our benchmarks
- [ ] ExtendJ
  - Consider whether we can use the source trees of projects that we build
    from source as workloads for the ExtendJ compiler benchmark.
    To do so we can prepare javac calls by assembling argument files and
    save those together with a copy of a primed source tree and then add
    a selection of such projects into an 'extendj-data.zip' file that is
    used for the ExtendJ benchmark.
    * The extendj benchmark (and other compiler implementations could then
      potentially benefit from all source projects added to the framework.
- [ ] JaCoP

# Dacapo benchmarks
Priority list for dacapo benchmark adaption.

## Prio 1
- [/] batik  (Compile|Deploy|Run)
- [ ] h2
- [/] luindex
- [/] lusearch
- [ ] tradebeans
- [ ] tradesoap
- [/] xalan

## Prio 2
- [ ] avrora
- [ ] fop
- [ ] graphchi  // Patches pom (pay attention when generating ivy file)
- [ ] pmd
- [ ] sunflow
- [ ] zxing

# Prio 3 (Maybe)
- [ ] biojava
- [ ] kafka

# Prio 4 (Maybe, maybe not)
- [ ] spring

# Prio 5 (Maybe, but probably not)
- [ ] h2o
- [ ] jme
- [ ] jython
- [ ] tomcat

# Prio 6 (Probably not)
- [ ] cassandra
- [ ] eclipse

